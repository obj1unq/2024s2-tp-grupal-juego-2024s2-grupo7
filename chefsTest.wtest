import restaurante.*
import comestibles.*
import posiciones.*
import chefs.*
import restauranteTest.*
import objetosParaTests.*


import wollok.game.*

describe "chefs test" {
  test "remy puede moverse porque no hay ningun mueble en el medio y se mueve" {
    remy.mover(abajo)
    assert.equals(game.at(0,3), remy.position())

    remy.mover(derecha)
    assert.equals(game.at(1,3), remy.position())
  }

  test "remy no puede moverse porque hay un mueble arriba suyo y a su izquiera está el límite del mapa" {
    assert.that(restaurante.hayMuebleAqui(game.at(0,5))) //esto es arriba de remy

    assert.throwsException({ remy.moverse(arriba) })
    assert.throwsException({ remy.moverse(izquierda) })
  }

  test "remy agarra un ingrediente (tomate) que esta abajo suyo en donde mira, en la mesada4" { 
    remy.mover(abajo)
    assert.that(remy.tengoBandejaVacia())
    assert.equals(abajo, remy.orientacion()) //a donde esta "mirando"
    assert.equals(game.at(0,2), remy.dondeApunta())
    assert.equals(mesada4, restaurante.muebleAqui(remy.dondeApunta()))
    remy.interactuar()

    assert.equals(tomate, remy.bandeja())
  }

  test "remy no puede agarrar un ingrediente porque no hay ningun muble con ingrediente en donde está mirando, a su derecha, no falla pero se da el aviso de que no hay nada allí y su bandeja sigue igual" {
    remy.mover(derecha)
    assert.that(remy.tengoBandejaVacia())

    assert.equals(derecha, remy.orientacion()) //a donde esta "mirando"
    assert.equals(game.at(1,4), remy.position())
    assert.equals(game.at(2,4), remy.dondeApunta())

    assert.notThat(restaurante.hayMuebleAqui(remy.dondeApunta()))
    assert.that(remy.tengoBandejaVacia())
  
  }

  test "remy no puede agarrar un ingrediente porque tiene algo en las manos ya" { 
     remy.bandeja(queso)
     remy.mover(abajo)

    assert.that(restaurante.hayMuebleAqui(remy.dondeApunta()))
    assert.equals(tomate, restaurante.muebleAqui(remy.dondeApunta()).contenido())

    assert.throwsException({ remy.interactuar() })

    assert.equals(queso, remy.bandeja())
    assert.equals(tomate, restaurante.muebleAqui(remy.dondeApunta()).contenido())

 }

  test "remy puede soltar ingrediente porque hay una mesada en donde esta mirando" { 
     remy.position( game.at(5,4) )
     remy.bandeja(tomate)
     assert.notThat(remy.tengoBandejaVacia())
     remy.mover(abajo)

     assert.that(restaurante.hayMuebleAqui(remy.dondeApunta()))
     assert.that(restaurante.muebleAqui(remy.dondeApunta()).estaLibre())

     remy.interactuar()

     assert.that(remy.tengoBandejaVacia())
     assert.equals(tomate, restaurante.muebleAqui(remy.dondeApunta()).contenido())
    
  }

  test "remy no puede soltar el ingrediente porque no hay ninguna mesada aqui, intenta soltar el ingrediente, no tira error pero no pasa nada y sigue teniendo su queso" { 
    remy.bandeja(queso)
    assert.equals(queso, remy.bandeja())
    assert.notThat(restaurante.hayMuebleAqui(remy.dondeApunta()))

    remy.interactuar()

    assert.equals(queso, remy.bandeja())
  }

  // test "remy puede procesar el tomate porque hay una mesada" { //FALTA EL PROCESAR
  //   // remy.position( game.at(3,5) )
  //   // remy.mover(derecha)
  //   // remy.interactuar()
  //   // assert.notThat(remy.tengoBandejaVacia())
  //   // remy.mover(izquierda)
  //   // remy.interactuar()
  //   // assert.equals("tomate_inicial.png", tomate.image())
  // }

  // test "remy no puede procesar porque hay un mueble pero no es una mesada, es un tacho" { //FALTA EL PROCESAR
  //   //   remy.position( game.at(5,6) )
  // //   remy.interactuar()
  // //   assert.notThat(remy.tengoBandejaVacia())

  // //   remy.mover(arriba)
  // //   remy.mover(izquierda)
  // //   remy.mover(izquierda)

  // //   assert.throwsException({ remy.procesarIngrediente() })
  // // 
  // }

  test "remi va a tirar el queso que agarro a la basura y se puede porque hay un tacho" {
    remy.position(game.at(3,3))
    remy.mover(arriba)
    remy.bandeja(queso)

    assert.notThat(remy.tengoBandejaVacia())
    remy.interactuar()

    assert.that(remy.tengoBandejaVacia())

  }

  //elimino el test de que va a tirar algo pero no puede porque no hay nada porque es igual que el de querer apoyar algo en una mesada pero no hay mesada

  test "remy agarra una masa con queso y la mete al horno y luego la saca del horno" {
     remy.position( game.at(5,3) )
     masa.recibirIngrediente(queso)
     remy.bandeja(masa)
     remy.mover(arriba)

     assert.notThat(remy.tengoBandejaVacia())
     assert.equals(horno, restaurante.muebleAqui(remy.dondeApunta()))

     remy.interactuar()

     assert.equals(masa, horno.contenido())

     remy.interactuar()

     assert.that(horno.estaLibre())
    
  }

}