import posiciones.*
import personaBase.*
import objetosParaTests.*

import wollok.game.*

describe "chefs test" {
  test "remy puede moverse porque no hay ningun mueble en el medio y se mueve" {
    remy.mover(abajo)
    assert.equals(game.at(0,3), remy.position())

    remy.mover(derecha)
    assert.equals(game.at(1,3), remy.position())
  }

  test "remy no puede moverse porque hay un mueble arriba suyo y a su izquiera está el límite del mapa" {
    remy.position(game.at(2,4))
    assert.that(restaurantest.hayMuebleAqui(game.at(2,5))) //esto es arriba de remy

    assert.throwsException({ remy.moverse(arriba) })
    assert.throwsException({ remy.moverse(izquierda) })
  }

  test "remy agarra un ingrediente (tomate) que esta abajo suyo en donde mira, en la mesada4" { 
    remy.mover(abajo)
    assert.that(remy.tengoBandejaVacia())
    assert.equals(abajo, remy.orientacion()) //a donde esta "mirando"
    assert.equals(game.at(0,2), remy.dondeApunta())
    assert.equals(mesada4, restaurantest.muebleAqui(remy.dondeApunta()))
    remy.interactuar()

    assert.equals(tomate.tipoIngrediente(), remy.bandeja().tipoIngrediente()) 
  }

  test "remy no puede agarrar un ingrediente porque no hay ningun muble con ingrediente en donde está mirando, a su derecha, no falla pero se da el aviso de que no hay nada allí y su bandeja sigue igual" {
    remy.mover(derecha)
    assert.that(remy.tengoBandejaVacia())

    assert.equals(derecha, remy.orientacion()) //a donde esta "mirando"
    assert.equals(game.at(1,4), remy.position())
    assert.equals(game.at(2,4), remy.dondeApunta())

    assert.notThat(restaurantest.hayMuebleAqui(remy.dondeApunta()))
    assert.that(remy.tengoBandejaVacia())
  
  }

  test "remy no puede agarrar un ingrediente porque tiene algo en las manos ya" { 
     remy.bandeja(queso)
     remy.mover(abajo)

    assert.that(restaurantest.hayMuebleAqui(remy.dondeApunta()))
    assert.equals(tomate, restaurantest.muebleAqui(remy.dondeApunta()).contenido())

    assert.throwsException({ remy.interactuar() })

    assert.equals(queso, remy.bandeja())
    assert.equals(tomate, restaurantest.muebleAqui(remy.dondeApunta()).contenido())

 }

  test "remy puede soltar ingrediente porque hay una mesada en donde esta mirando" { 
     remy.position( game.at(5,4) )
     remy.bandeja(tomate)
     assert.notThat(remy.tengoBandejaVacia())
     remy.mover(abajo)

     assert.that(restaurantest.hayMuebleAqui(remy.dondeApunta()))
     assert.that(restaurantest.muebleAqui(remy.dondeApunta()).estoyLibre())
     assert.equals(bandejaVacia, restaurantest.muebleAqui(remy.dondeApunta()).contenido()) //-> igual que en el tomate

    remy.interactuar()

    assert.that(remy.tengoBandejaVacia())
    assert.equals(tomate.tipoIngrediente(), restaurantest.muebleAqui(remy.dondeApunta()).contenido().tipoIngrediente())
    
  }

  test "remy no puede soltar el ingrediente porque no hay ninguna mesada aqui, intenta soltar el ingrediente, no tira error pero no pasa nada y sigue teniendo su queso" { 
    remy.bandeja(queso)
    assert.equals(queso, remy.bandeja())
    assert.notThat(restaurantest.hayMuebleAqui(remy.dondeApunta()))

    assert.throwsException({ remy.interactuar() })

    assert.equals(queso, remy.bandeja())
  }

  test "remy puede procesar el tomate porque hay una mesada allí" {
    remy.mover(abajo)

    assert.equals(tomate, restaurantest.muebleAqui(remy.dondeApunta()).contenido())
    assert.notThat(restaurantest.muebleAqui(remy.dondeApunta()).contenido().fueProcesado())

    remy.procesar()

    assert.that(restaurantest.muebleAqui(remy.dondeApunta()).contenido().fueProcesado())
  }

  test "remy no puede procesar porque no hay nada que procesar en el mueble" {
    remy.position(game.at(5,3))
    assert.that(restaurantest.hayMuebleAqui(remy.dondeApunta()))
    assert.that(restaurantest.muebleAqui(remy.dondeApunta()).estoyLibre())

    assert.throwsException({ remy.procesar() })

  }

  test "remi va a tirar el queso que agarro a la basura y se puede porque hay un tacho" {
    remy.position(game.at(3,3))
    remy.mover(arriba)
    remy.bandeja(queso)
    game.addVisualCharacter(queso)

    assert.notThat(remy.tengoBandejaVacia())
    remy.interactuar()

    assert.that(remy.tengoBandejaVacia())

  }

  test "remy agarra una masa con queso y la mete al horno y luego la saca del horno" {
    game.addVisual(masa)
    game.addVisual(queso)

     remy.position( game.at(5,3) )
     masa.serProcesado() //es importante primero procesar todos los ingredientes para poder integrarlos todos :)
     queso.serProcesado()

      masa.recibirIngrediente(queso)
      remy.bandeja(masa)
      remy.mover(arriba)

      assert.notThat(remy.tengoBandejaVacia())
      assert.equals(horno, restaurantest.muebleAqui(remy.dondeApunta()))

      remy.interactuar()

      assert.equals(masa, horno.contenido())

      remy.interactuar()

      assert.that(horno.estoyLibre())
    
  }

  test "no se puede agregar un tomate a la masa porque la masa no fue procesada y despues porque el queso no fue procesado pero una vez son procesados ambos si se puede" {
     remy.position( game.at(5,3) ) //esta en una estacion de procesamiento 
     assert.notThat(tomate.fueProcesado())
     assert.throwsException({ masa.recibirIngrediente(tomate) }) //no lo accepta porque ninguno fue procesado
     
     masa.serProcesado() 
     assert.throwsException({ masa.recibirIngrediente(tomate) }) //no lo accepta porque el tomate no fue procesado
     
     tomate.serProcesado()
     
     masa.recibirIngrediente(tomate)

     assert.equals([tomate], masa.ingredientes())

  }

}