import posiciones.*
import chefs.*
import restauranteTest.*
import objetosParaTests.*
import objetosCocina.*

import wollok.game.*

describe "horno" {
  test "el horno recibe pizzas porque tiene espacio y devuelve las pizzas en orden" { //aca hay problemas con el agarrar y soltar si todavía hay espacio y teniendo más de un objeto en el horno es dificil elegir si quiere poner la segunda pizza o sacar la primera
    // horno.recibir(preparacion)
    horno.usarse(remy)
    // assert.that(horno.hayAlMenos1Pizza())
    assert.that(horno.tieneAlgo())
    // horno.recibir(preparacion2)
    //horno.usarse(remy)
    // assert.notThat(horno.hayEspacioEnHorno())
    //assert.that(horno.tieneEspacio())
    // assert.equals(preparacion, horno.primeraPizzaEnHorno())
    //assert.equals(preparacion, horno.primerIngrediente())
  }

  test "el horno recibe pizzas hasta su maximo espacio" {
    assert.equals(2, horno2.maxCapacidad())
    // horno2.recibir(preparacion)
    horno2.usarse(remy)
    // assert.that(horno2.hayAlMenos1Pizza())
    assert.that(horno.tieneAlgo())
    // horno2.recibir(preparacion2)
    horno2.usarse(remy)
    // assert.notThat(horno2.hayEspacioEnHorno())
    assert.notThat(horno2.hayEspacio())
    // assert.throwsException({ horno2.recibir(masa) })
    assert.throwsException({ horno2.usarse(remy) })
  }
}

describe "mesada" {
  test "mesada vacia recibe un ingredinte y luego lo entrega" {
    // mesada1.recibirIngrediente(tomate)
    mesada1.usarse(remy)
    // assert.equals(tomate, mesada1.cosasEncima())
    assert.equals(tomate, mesada1.contenido())

    // mesada1.entregarIngredienteEncima()
    mesada1.usarse(remy)

    // assert.that(mesada1.estaLibre())
    assert.that(mesada1.estaLibre())
  }

  test "mesada recibe una preparacion y los ingredientes que van hacia la mesada se agregan a la preparacion en vez de a la mesada y modifican la preparacion" {
    // mesada1.recibirIngrediente(preparacion)
    mesada1.usarse(Chef)
    // assert.equals(preparacion, mesada1.cosasEncima())
    assert.equals(preparacion, mesada1.contenido())
    // mesada1.recibirIngrediente(tomate)
    mesada1.usarse(Chef)

    // assert.equals(preparacion, mesada1.cosasEncima())
    assert.equals(preparacion, mesada1.contenido())
    // assert.that(mesada1.tieneUnaPiza())
    assert.that(mesada1.tienePizza())
    // assert.that(preparacion.tieneIngredientes())
    assert.that(preparacion.tieneIngredientes()) //FIJARSE QUE ES ESTO

    // mesada1.entregarIngredienteEncima()
    mesada1.usarse(remy)
    // assert.that(mesada1.estaLibre())
    assert.that(mesada1.estaLibre())
    // assert.that(preparacion.tieneIngredientes())
    assert.that(preparacion.tieneIngredientes())
  }
  test "remy va a la canaste de tomates  y toma uno en su bandeja"{
   
   remy.position(game.at(0,2))
   remy.mover(derecha)
   remy.recogerIngrediente()

   assert.equals(tomate.identity(), remy.bandeja().identity()) //acá hay que cambiar la forma de verificar el objeto

  }
  // el test da  0 passing eso  esta mal, no le encontre la vuelta 
}
