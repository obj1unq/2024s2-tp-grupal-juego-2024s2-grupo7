import factoryIngredientes.*
import comestibles.*
import objetosParaTests.*

import wollok.game.*

describe "funcionalidad horno" {
  test "el horno recibe pizzas porque esta libre y luego devuelve la pizza porque el chef tiene las manos vacias" { 
    remy.bandeja(masa)
    masa.serProcesado()
    horno.usarse(remy)
    
    assert.notThat(horno.estoyLibre())
    
     assert.that(remy.tengoBandejaVacia())
     horno.usarse(remy)
    
     assert.that(horno.estoyLibre())
     assert.notThat(remy.tengoBandejaVacia())
    
  }

  test "ocurre un fallo porque el horno no puede recibir m√°s de 1 pizza" { 
    remy.bandeja(masa)
    masa.serProcesado()
    horno.usarse(remy)
    
    assert.notThat(horno.estoyLibre())
    
    assert.that(remy.tengoBandejaVacia())

    remy.bandeja(tomate)
    assert.notThat(remy.tengoBandejaVacia())

    assert.notThat(horno.estoyLibre())

    assert.throwsException({ horno.usarse(remy) })
  }

  test "ahora el error ocurre porque remy no tienen nada que darle al horno y el horno no tiene nada que darle a remy" {
    assert.that(remy.tengoBandejaVacia())
    assert.throwsException({ horno.usarse(remy) })
  }

}

describe "mesada" {
  test "mesada vacia recibe un ingredinte y luego lo entrega" {
    remy.bandeja(tomate)
    tomate.serProcesado()
    mesada3.usarse(remy)
    
    assert.equals(tomate, mesada3.contenido())
    assert.that(remy.tengoBandejaVacia())

    mesada3.usarse(remy)

    assert.that(mesada3.estoyLibre())
  }

  test "mesada recibe una masa y los ingredientes que van hacia la mesada se agregan a la masa en vez de a la mesada y modifican la masa" { 
    
    remy.bandeja(masa)
    masa.serProcesado()
    mesada3.usarse(remy)
    
    assert.equals(masa, mesada3.contenido())
    
    remy.bandeja(tomate)
    tomate.serProcesado()
    mesada3.usarse(remy)

    
    assert.equals(masa, mesada3.contenido())
    
    assert.notThat(mesada3.estoyLibre())
    
    assert.that(masa.tieneIngredientes()) 

    
    mesada3.usarse(remy)
    
    assert.that(mesada3.estoyLibre())
    
    assert.that(masa.tieneIngredientes())
  }
  test "remy va a la canaste de tomates  y toma uno en su bandeja"{ //rarisimo que sigue fallando 
   
   assert.that(remy.tengoBandejaVacia())
   estacionTomate.usarse(remy)
   assert.notThat(remy.tengoBandejaVacia())

   assert.equals(ingredienteTomate, remy.bandeja().tipoIngrediente()) //es mejor forma de comparar

  }
}
