import posiciones.*
import chefs.*
import restauranteTest.*
import objetosParaTests.*
import objetosCocina.*

import wollok.game.*

describe "horno" {
  test "el horno recibe pizzas porque esta libre y luego devuelve la pizza porque el chef tiene las manos vacias" { 
    remy.bandeja(preparacion)
    horno.usarse(remy)
    
    assert.that(horno.tieneAlgo())
    
    assert.that(remy.tengoBandejaVacia())
    horno.usarse(remy)
    
    assert.notThat(horno.tieneAlgo())
    assert.notThat(remy.tengoBandejaVacia())
    
  }

  test "ocurre un fallo porque el horno no puede recibir más de 1 pizza" { 
    remy.bandeja(preparacion)
    horno.usarse(remy)
    
    assert.that(horno.tieneAlgo())
    
    assert.that(remy.tengoBandejaVacia())

    remy.bandeja(tomate)
    assert.notThat(remy.tengoBandejaVacia())

    assert.that(horno.tieneAlgo())

    assert.throwsException({ horno.usarse(remy) })
  }

  test "ahora el error ocurre porque remy no tienen nada que darle al horno y el horno no tiene nada que darle a remy" {
    assert.that(remy.tengoBandejaVacia())
    assert.throwsException({ horno.usarse(remy) })
  }

}

describe "mesada" {
  test "mesada vacia recibe un ingredinte y luego lo entrega" {
    remy.bandeja(tomate)
    mesada1.usarse(remy)
    
    assert.equals(tomate, mesada1.contenido())

    mesada1.usarse(remy)

    assert.that(mesada1.estaLibre())
  }

  test "mesada recibe una preparacion y los ingredientes que van hacia la mesada se agregan a la preparacion en vez de a la mesada y modifican la preparacion" { 
    
    remy.bandeja(preparacion)
    mesada1.usarse(remy)
    
    assert.equals(preparacion, mesada1.contenido())
    
    remy.bandeja(tomate)
    mesada1.usarse(remy)

    
    assert.equals(preparacion, mesada1.contenido())
    
    assert.that(mesada1.tienePiza())
    
    assert.that(preparacion.tieneIngredientes()) 

    
    mesada1.usarse(remy)
    
    assert.that(mesada1.estaLibre())
    
    assert.that(preparacion.tieneIngredientes())
  }
  test "remy va a la canaste de tomates  y toma uno en su bandeja"{ //ACA HAY UNA FALLA QUE NI SALTA EL ERROR; VER 
   
   remy.position(game.at(0,2))
   remy.mover(derecha)
   remy.recogerIngrediente()

   assert.equals(tomate.identity(), remy.bandeja().identity()) //acá hay que cambiar la forma de verificar el objeto

  }
  // el test da  0 passing eso  esta mal, no le encontre la vuelta 
}
